// ==UserScript==
// @name         Weeding Catalogue Report Complete Automator
// @namespace    Sajin M. Simon
// @version      0.6
// @description  Automates all selections in weeding catalogue report page with enhanced copy notification
// @author       Sajin M. Simon
// @match        http://10.145.22.11:8888/report_catalogue.php
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

     // Replace favicon
    function replaceFavicon() {
        const existingFavicon = document.querySelector("link[rel*='icon']");
        if (existingFavicon) {
            existingFavicon.href = "https://www.w3schools.com/favicon.ico";
        } else {
            const newFavicon = document.createElement("link");
            newFavicon.rel = "icon";
            newFavicon.href = "https://www.w3schools.com/favicon.ico";
            document.head.appendChild(newFavicon);
        }
    }

    // Run favicon replacement on load
    replaceFavicon();

    // Add custom styles for the notification
    const style = document.createElement('style');
    style.textContent = `
        .copy-notification {
            position: fixed;
            top: 20px;
            left: 20px;
            background-color: #FF2400;
            color: white;
            padding: 16px;
            border-radius: 4px;
            z-index: 10000;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            display: none;
            animation: slideIn 0.3s ease-in-out;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
            }
            to {
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);

    // Create notification element
    const notification = document.createElement('div');
    notification.className = 'copy-notification';
    notification.textContent = 'Data copied to clipboard!';
    document.body.appendChild(notification);

    // Function to show notification
    function showNotification() {
        notification.style.display = 'block';
        notification.style.animation = 'slideIn 0.3s ease-in-out';

        setTimeout(() => {
            notification.style.animation = 'fadeOut 0.3s ease-in-out';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 300);
        }, 2000);
    }

    document.title = "ðŸ”´ðŸ”´ðŸ”´Sajin ReportðŸ”´ðŸ”´ðŸ”´";

    // Observer for title changes
    const observer = new MutationObserver(function() {
        if (document.title !== "Entry") {
            document.title = "Entry";
        }
    });

    observer.observe(document.querySelector('title'), {
        subtree: true,
        characterData: true,
        childList: true
    });

    // Replace loading GIF
    function replaceLoadingGif() {
        const images = document.querySelectorAll('img[src*="loading.gif"]');
        images.forEach(img => {
            img.src = 'https://raw.githubusercontent.com/ravanabackup/weeding/refs/heads/main/pepe-evil-plan-evil-plan.gif';
        });
    }

    // Wait for element function
    function waitForElement(selector) {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }

            const observer = new MutationObserver(mutations => {
                if (document.querySelector(selector)) {
                    observer.disconnect();
                    resolve(document.querySelector(selector));
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }

    // Function to wait for options
    function waitForOptions(selectElement) {
        return new Promise(resolve => {
            if (selectElement.options.length > 1) {
                return resolve();
            }

            const observer = new MutationObserver(mutations => {
                if (selectElement.options.length > 1) {
                    observer.disconnect();
                    resolve();
                }
            });

            observer.observe(selectElement, {
                childList: true,
                subtree: true
            });
        });
    }

    // Handle selections function
    async function handleSelections() {
        try {
            const locationSelect = document.getElementById('location');
            locationSelect.value = 'CJA';
            locationSelect.dispatchEvent(new Event('change'));

            const batchSelect = document.getElementById('batch_number');
            await waitForOptions(batchSelect);
            await new Promise(resolve => setTimeout(resolve, 500));
            const selectedBatch = selectHighestNumber(batchSelect);

            if (selectedBatch) {
                const rackSelect = document.getElementById('rack_number');
                await waitForOptions(rackSelect);
                await new Promise(resolve => setTimeout(resolve, 500));
                const selectedRack = selectHighestNumber(rackSelect);

                if (selectedRack) {
                    const shelfSelect = document.getElementById('shelf_number');
                    await waitForOptions(shelfSelect);
                    await new Promise(resolve => setTimeout(resolve, 500));
                    selectHighestNumber(shelfSelect);

                    const submitButton = document.querySelector('button[name="btn_diary"]');
                    if (submitButton) {
                        submitButton.click();
                    }
                }
            }
        } catch (error) {
            console.error('Error in selection sequence:', error);
        }
    }

    // Select highest number function
    function selectHighestNumber(selectElement) {
        if (!selectElement) return;

        const options = Array.from(selectElement.options);
        if (options.length <= 1) return;

        const numbers = options
            .slice(1)
            .map(opt => parseInt(opt.value))
            .filter(num => !isNaN(num));

        if (numbers.length > 0) {
            const highestNumber = Math.max(...numbers);
            selectElement.value = highestNumber;
            selectElement.dispatchEvent(new Event('change'));
            return highestNumber;
        }
        return null;
    }

    // Main automation function
    async function automate() {
        try {
            replaceLoadingGif();

            const observer = new MutationObserver((mutations) => {
                replaceLoadingGif();
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['src']
            });

            const locationRadio = await waitForElement('#p_type3');
            locationRadio.click();

            await waitForElement('#location');

            document.getElementById('location_wise').style.display = '';
            document.getElementById('date_wise').style.display = 'none';
            document.getElementById('case_wise').style.display = 'none';

            await handleSelections();

            // Add copy notification functionality
            waitForElement('.dt-buttons').then(() => {
                const copyButton = document.querySelector('.dt-button.buttons-copy');
                if (copyButton) {
                    copyButton.addEventListener('click', () => {
                        showNotification();
                    });
                }
            });

        } catch (error) {
            console.error('Error in automation:', error);
        }
    }

    // Add manual trigger button
    function addManualTriggerButton() {
        const button = document.createElement('button');
        button.textContent = 'Auto-Select Highest Numbers';
        button.style.position = 'fixed';
        button.style.top = '10px';
        button.style.right = '10px';
        button.style.zIndex = '9999';
        button.style.backgroundColor = '#4CAF50';
        button.style.color = 'white';
        button.style.padding = '10px';
        button.style.border = 'none';
        button.style.borderRadius = '5px';
        button.style.cursor = 'pointer';
        button.onclick = handleSelections;
        document.body.appendChild(button);
    }

    // Start automation when page is loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            automate();
            addManualTriggerButton();
        });
    } else {
        automate();
        addManualTriggerButton();
    }
})();
